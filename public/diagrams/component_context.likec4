specification {
  element system
  element container
  element component
}

model {
  mfm = system 'Multiflexmeter V3' {
    
    application = container 'Application Firmware' {
      description 'Main firmware logic in C++'

      eventHandler = component 'Event Handler' {
        description 'Processes LMIC events (join, TX complete, RX complete) and coordinates application flow'
        technology 'onEvent() in main.cpp'
      }

      measurementMgr = component 'Measurement Manager' {
        description 'Orchestrates sensor measurement cycle including trigger, wait, and read operations'
        technology 'do_measure() job function'
      }

      configMgr = component 'Config Manager' {
        description 'Loads and manages LoRaWAN credentials from EEPROM on startup'
        technology 'rom_read_cred() in rom_conf.cpp'
      }

      sensorInterface = component 'Sensor Interface' {
        description 'Implements SMBus protocol for sensor communication (CMD_PERFORM, CMD_READ)'
        technology 'sensorRead() with Wire library'
      }
    }

    lmic = container 'LMIC Stack' {
      description 'LoRaWAN protocol implementation'
    }

    config = container 'Configuration Store' {
      description 'EEPROM storage for credentials'
    }

    sensor = container 'Sensor' {
      description 'SMBus measurement device'
    }
  }

  mfm.application.eventHandler -> mfm.lmic 'Receives LMIC events'
  mfm.application.eventHandler -> mfm.application.measurementMgr 'Triggers measurement cycle on join success'
  mfm.application.measurementMgr -> mfm.application.sensorInterface 'Reads sensor data'
  mfm.application.sensorInterface -> mfm.sensor 'Sends SMBus commands'
  mfm.application.configMgr -> mfm.config 'Reads credentials from EEPROM'
  mfm.application.measurementMgr -> mfm.lmic 'Schedules uplink transmission'
}

views {
  view component_context {
    title 'Component Context - Application Firmware Components'
    include mfm.application.*
    include mfm.lmic
    include mfm.config
    include mfm.sensor
  }
}
