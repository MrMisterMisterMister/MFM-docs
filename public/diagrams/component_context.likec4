specification {
  element component
  element database
  element external
}

model {
  // Firmware Components
  firmware = component 'MultiFlexMeter Firmware' {
    
    main = component 'Main Controller' {
      description 'Core event loop and orchestration'
      technology 'main.cpp'
    }
    
    lora_events = component 'LoRaWAN Event Handler' {
      description 'Handles LMIC events: join, TX complete, etc.'
      technology 'onEvent()'
    }
    
    job_scheduler = component 'Job Scheduler' {
      description 'Schedules measurements and transmissions'
      technology 'OS Jobs'
    }
    
    rom_conf = component 'Configuration Manager' {
      description 'Manages EEPROM-stored configuration'
      technology 'rom_conf.cpp'
    }
    
    sensors = component 'Sensor Interface' {
      description 'Abstracts sensor communication'
      technology 'sensors.cpp'
    }
    
    smbus = component 'SMBus Driver' {
      description 'I2C/SMBus protocol implementation'
      technology 'smbus.cpp'
    }
    
    board = component 'Board Support' {
      description 'Board-specific initialization and pin mapping'
      technology 'boards/*.cpp'
    }
    
    wdt = component 'Watchdog Timer' {
      description 'System reset and monitoring'
      technology 'wdt.cpp'
    }
  }
  
  // External Dependencies
  lmic = external 'LMIC Library' {
    description 'LoRaWAN MAC layer'
  }
  
  eeprom = database 'EEPROM' {
    description 'Configuration storage'
  }
  
  sensor_module = database 'Sensor Module' {
    description 'External measurement device'
  }
  
  // Relationships
  firmware.main -> firmware.job_scheduler 'Schedules jobs' {
    technology 'os_setCallback()'
  }
  
  firmware.main -> firmware.lora_events 'Receives events' {
    technology 'Callback'
  }
  
  firmware.job_scheduler -> firmware.sensors 'Triggers measurements' {
    technology 'Function call'
  }
  
  firmware.job_scheduler -> lmic 'Sends data' {
    technology 'LMIC_setTxData2()'
  }
  
  firmware.lora_events -> firmware.rom_conf 'Reads config' {
    technology 'conf_get*()'
  }
  
  firmware.lora_events -> firmware.job_scheduler 'Schedules next action' {
    technology 'os_setCallback()'
  }
  
  firmware.sensors -> firmware.smbus 'Communicates via I2C' {
    technology 'smbus_*()'
  }
  
  firmware.smbus -> sensor_module 'Reads/writes' {
    technology 'I2C protocol'
  }
  
  firmware.rom_conf -> eeprom 'Reads/writes' {
    technology 'EEPROM API'
  }
  
  firmware.board -> firmware.main 'Initializes hardware' {
    technology 'board_setup()'
  }
  
  firmware.main -> firmware.wdt 'Monitors system' {
    technology 'wdt_enable()'
  }
}

views {
  view index {
    title 'MultiFlexMeter V3 - Component Context'
    include *
  }
}
