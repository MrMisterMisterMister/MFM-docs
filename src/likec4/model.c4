specification {
    element system {
        style {
            color red
            shape rectangle
            border solid
        }
    }
    element externalSystem {
        style {
            color green
            shape rectangle
            border dashed
        }
    }
    element container {
        style {
            color indigo
            shape rectangle
            border solid
        }
    }
    element component {
        style {
            color amber
            shape rectangle
            border solid
        }
    }
    element codeUnit {
        style {
            color sky
            shape rectangle
            border solid
        }
    }
}

model {
    // Data source - The physical system being monitored
    mallemolen = externalSystem "Mallemolen Polder Mill" {
        title "Mallemolen (Historic Polder Mill in Gouda)"
        description "Traditional Dutch polder mill built in 1727, used for water management and drainage. Monitoring focuses on wing revolution frequency/speed and pumping activity detection."
        technology "Historic Polder Mill Structure"
    }

    // External systems - Level 1: System Context
    lorawanNetwork = externalSystem "LoRaWAN Network" {
        title "The Things Network (TTN)"
        description "The Things Network infrastructure providing LoRaWAN connectivity and message routing"
        technology "LoRaWAN Network Server"
    }

    multiflexmeterServer = externalSystem "Multiflexmeter Server" {
        title "Multiflexmeter Backend Server"
        description "Backend server for data storage, analysis, visualization and device management"
        technology "Database Server & Web Application"
    }

    // Main system - Level 1: System Context (Our System)
    multiFlexMeter = system "Multiflexmeter Device" {
        title "Multiflexmeter IoT Device"
        description "ATmega1284P-based IoT sensor platform for environmental monitoring with LoRaWAN connectivity"
        technology "Embedded System with LoRaWAN"

        // Level 2: Containers
        // Firmware Container
        deviceFirmware = container "Device Firmware" {
            title "Device Firmware"
            description "Embedded firmware running on ATmega1284P microcontroller"
            technology "C++/Arduino Framework"

            // Level 3: Components
            applicationController = component "Application Controller" {
                title "Application Controller"
                description "Main application logic coordinating device behavior and LoRaWAN communication"
                technology "main.cpp"

                // Level 4: Code units
                setupFunction = codeUnit "setup()" {
                    title "setup()"
                    description "Device initialization, LMIC setup, and configuration loading"
                    technology "C++ Function"
                }

                eventHandler = codeUnit "onEvent()" {
                    title "onEvent()"
                    description "LoRaWAN event processing (join, transmission, downlink)"
                    technology "C++ Function"
                }

                measurementJobs = codeUnit "Measurement Jobs" {
                    title "job_performMeasurements(), job_fetchAndSend()"
                    description "Scheduled measurement and transmission workflow"
                    technology "C++ Functions"
                }
            }

            sensorManager = component "Sensor Manager" {
                title "Sensor Manager"
                description "High-level sensor interface and data collection coordination via I2C sensor network"
                technology "sensors.cpp"

                sensorAPI = codeUnit "Core Sensor Functions" {
                    title "sensors_init(), sensors_performMeasurement(), sensors_readMeasurement()"
                    description "EXISTING sensor API for I2C sensor board communication at address 0x36 (JSN-SR04T + DS18B20)"
                    technology "C++ Functions"
                }

                wingStatusFunctions = codeUnit "Wing Status Functions [TODO]" {
                    title "sensors_isWingRotating(), sensors_getWingMovement() [TO BE IMPLEMENTED]"
                    description "Simple wing rotation detection via I2C Hall sensor - returns true/false if wings are moving"
                    technology "C++ Functions extending existing sensor API [TODO]"
                }

                pumpStatusFunctions = codeUnit "Pump Status Functions [TODO]" {
                    title "sensors_isPumpActive(), sensors_getPumpMovement() [TO BE IMPLEMENTED]"
                    description "Simple pump activity detection via I2C Hall sensor - returns true/false if pump is moving"
                    technology "C++ Functions extending existing sensor API [TODO]"
                }
            }

            configurationManager = component "Configuration Manager" {
                title "Configuration Manager"
                description "Device configuration, LoRaWAN credentials, and settings management"
                technology "rom_conf.cpp"

                configStructure = codeUnit "Configuration Structure" {
                    title "rom_conf_t, conf_load(), conf_save()"
                    description "EEPROM configuration layout and persistence functions"
                    technology "C++ Struct & Functions"
                }
            }

            communicationStack = component "Communication Stack" {
                title "Communication Stack"
                description "LoRaWAN protocol implementation and radio control"
                technology "arduino-lmic library"
            }

            hardwareAbstraction = component "Hardware Abstraction Layer" {
                title "Hardware Abstraction Layer"
                description "Low-level hardware drivers and board support"
                technology "smbus.cpp, board.cpp, wdt.cpp"

                i2cDriver = codeUnit "I2C Driver" {
                    title "smbus_blockRead(), smbus_blockWrite(), TWI functions"
                    description "I2C/SMBus protocol implementation for sensor communication"
                    technology "C++ Functions"
                }

                boardSupport = codeUnit "Board Support" {
                    title "board_setup(), pin definitions"
                    description "Hardware initialization and GPIO configuration"
                    technology "C++ Functions & Constants"
                }
            }
        }

        // Hardware Container
        deviceHardware = container "Device Hardware" {
            title "Device Hardware"
            description "Physical hardware components of the Multiflexmeter device"
            technology "Custom PCB with ATmega1284P, Sensors, LoRa Module, EEPROM, Power Circuitry"

            sensorHardware = container "Sensor Hardware" {
                title "Polder Mill Monitoring Sensors"
                description "Multi-sensor I2C network for comprehensive polder mill monitoring using shared SDA/SCL bus"
                technology "I2C Bus Network with Multiple Slave Devices"

                existingSensorBoard = container "Existing Sensor Board [I2C 0x36]" {
                    title "Environmental Sensor Board"
                    description "Existing I2C slave device containing ultrasonic and temperature sensors"
                    technology "I2C Slave 0x36, JSN-SR04T + DS18B20, CMD_PERFORM=0x10, CMD_READ=0x11"
                }

                wingRevolutionSensor = container "Wing Revolution Sensor [TODO: I2C 0x37]" {
                    title "Wing Revolution Detection [TO BE IMPLEMENTED]"
                    description "I2C Hall Effect sensor board for precise wing rotation measurement - TO BE ADDED"
                    technology "I2C Slave 0x37, Hall Effect A3144, CMD_READ_RPM=0x20 [TODO]"
                }

                pumpingDetectionSensor = container "Pumping Detection Sensor [TODO: I2C 0x38]" {
                    title "Pumping Mechanism Detection [TO BE IMPLEMENTED]"
                    description "I2C Hall Effect sensor board for rad/vijzel pumping activity detection - TO BE ADDED"
                    technology "I2C Slave 0x38, Hall Effect A3144, CMD_READ_STATUS=0x21 [TODO]"
                }

                i2cBusInfrastructure = container "I2C Bus Infrastructure" {
                    title "Shared I2C Communication Bus"
                    description "Two-wire I2C bus connecting all sensor devices to ATmega1284P"
                    technology "SDA/SCL lines, 100kHz, 7-bit addressing, SMBus protocol support"
                }
            }

            radioHardware = container "Radio Hardware" {
                title "LoRa Radio Module"
                description "Long-range wireless communication hardware"
                technology "SX1276 LoRa Transceiver"
            }

            storageHardware = container "Storage Hardware" {
                title "Non-volatile Storage"
                description "Configuration and credential storage"
                technology "EEPROM"
            }

            powerHardware = container "Power System" {
                title "Power Management"
                description "Battery power supply and management circuits"
                technology "Battery & Power Electronics"
            }
        }
    }

    // External System Connections to Our System
    multiFlexMeter -> mallemolen "Monitors polder mill operations"
    multiFlexMeter -> lorawanNetwork "Transmits sensor data via LoRaWAN protocol"
    lorawanNetwork -> multiflexmeterServer "Routes processed data to backend platform"

    // Level 2: Container Relationships (Internal to Our System)
    deviceFirmware -> deviceHardware "Controls and interfaces with all hardware components"
    deviceFirmware -> sensorHardware "Controls and reads sensors via I2C"
    deviceFirmware -> radioHardware "Transmits LoRaWAN packets"
    deviceFirmware -> storageHardware "Stores/retrieves configuration and credentials"
    deviceFirmware -> powerHardware "Manages power consumption and sleep modes"

    // Physical sensor connections to data source
    sensorHardware -> mallemolen "Monitors polder mill conditions: wing revolution, pumping activity, temperature"
    existingSensorBoard -> mallemolen "Monitors environmental conditions (temperature, distance) via existing I2C interface"
    wingRevolutionSensor -> mallemolen "Measures wing gear rotation frequency and speed [TODO: TO BE IMPLEMENTED]"
    pumpingDetectionSensor -> mallemolen "Detects rad/vijzel pumping mechanism activity [TODO: TO BE IMPLEMENTED]"
    i2cBusInfrastructure -> mallemolen "Enables reliable sensor communication via shared I2C bus"

    // Container connections to external systems
    radioHardware -> lorawanNetwork "Sends LoRaWAN packets to TTN gateway"
    deviceFirmware -> lorawanNetwork "Manages LoRaWAN protocol stack"

    // Level 3: Component Relationships (Internal to Our System)
    applicationController -> communicationStack "Initiates LoRaWAN transmissions"
    applicationController -> configurationManager "Manages device settings and credentials"
    applicationController -> sensorManager "Schedules measurement cycles"
    // applicationController -> hardwareAbstraction "Controls hardware resources"

    sensorManager -> hardwareAbstraction "Uses I2C communication for sensor access"
    configurationManager -> hardwareAbstraction "Accesses EEPROM storage for persistence"
    communicationStack -> hardwareAbstraction "Controls radio hardware for LoRaWAN"

    // Component connections to external systems
    communicationStack -> lorawanNetwork "Handles LoRaWAN protocol communication"

    // Level 4: Code Unit Relationships (Internal to Our System)
    setupFunction -> configStructure "Loads device configuration from EEPROM"
    eventHandler -> measurementJobs "Schedules measurement tasks based on LoRaWAN events"
    measurementJobs -> sensorAPI "Triggers sensor readings for data collection"
    sensorAPI -> i2cDriver "Communicates via I2C protocol with sensors"
    configStructure -> boardSupport "Accesses hardware configuration and pin definitions"
    i2cDriver -> boardSupport "Uses board-specific I2C pin configurations"

    // Sensor function relationships - simplified for basic status detection
    sensorAPI -> wingStatusFunctions "Coordinates wing status detection [TODO: TO BE IMPLEMENTED]"
    sensorAPI -> pumpStatusFunctions "Coordinates pump status detection [TODO: TO BE IMPLEMENTED]"
    wingStatusFunctions -> i2cDriver "Uses SMBus for wing sensor communication [TODO: TO BE IMPLEMENTED]"
    pumpStatusFunctions -> i2cDriver "Uses SMBus for pump sensor communication [TODO: TO BE IMPLEMENTED]"
}

views {
    view index {
        title "System Context View: Multiflexmeter Polder Mill Monitoring"
        description "Level 1: System Context - Shows Multiflexmeter device monitoring Mallemolen polder mill wing revolution and pumping activity"
        include mallemolen, multiFlexMeter, lorawanNetwork, multiflexmeterServer
    }

    view of multiFlexMeter {
        title "Container View: Multiflexmeter Polder Mill Monitoring"
        description "Level 2: Container View - Shows major containers within Multiflexmeter monitoring wing revolution frequency and pumping status"
        include mallemolen, multiFlexMeter, deviceFirmware, deviceHardware, sensorHardware, radioHardware, storageHardware, powerHardware
        include lorawanNetwork, multiflexmeterServer
    }

    view of deviceFirmware {
        title "Component View: Multiflexmeter"
        description "Level 3: Component View - Shows software components within device firmware and their hardware interfaces"
        include multiFlexMeter, deviceFirmware, deviceHardware
        include applicationController, sensorManager, configurationManager, communicationStack, hardwareAbstraction
        include sensorHardware, radioHardware, storageHardware, powerHardware
        include lorawanNetwork, multiflexmeterServer, mallemolen
    }

    view of sensorHardware {
        title "I2C Sensor Network: Polder Mill Monitoring"
        description "Detailed view of I2C sensor network showing existing environmental sensors and planned Hall sensor expansion"
        include mallemolen, sensorHardware, i2cBusInfrastructure
        include existingSensorBoard, wingRevolutionSensor, pumpingDetectionSensor
    }

    view code {
        title "Code Diagram: Multiflexmeter"
        description "Level 4: Code View - Shows functions and structures within software components"
        include setupFunction, eventHandler, measurementJobs, sensorAPI, configStructure, i2cDriver, boardSupport
        include wingStatusFunctions, pumpStatusFunctions
        include applicationController, sensorManager, configurationManager, hardwareAbstraction
    }

    view sensorFunctions {
        title "I2C Sensor Functions Detail View"
        description "Detailed view of I2C sensor network function implementations for simple status detection"
        include sensorManager, sensorAPI
        include wingStatusFunctions, pumpStatusFunctions
        include i2cDriver, boardSupport
    }
}