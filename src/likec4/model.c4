specification {
    element system {
        style {
            color red
            shape rectangle
            border solid
        }
    }
    element externalSystem {
        style {
            color green
            shape rectangle
            border dashed
        }
    }
    element container {
        style {
            color indigo
            shape rectangle
            border solid
        }
    }
    element component {
        style {
            color amber
            shape rectangle
            border solid
        }
    }
    element codeUnit {
        style {
            color sky
            shape rectangle
            border solid
        }
    }
}

model {
    // Data source - The physical system being monitored
    mallemolen = externalSystem "Mallemolen Polder Mill" {
        title "Mallemolen (Historic Polder Mill in Gouda)"
        description "Traditional Dutch polder mill built in 1727, used for water management and drainage. Monitoring focuses on wing revolution frequency/speed and pumping activity detection."
        technology "Historic Polder Mill Structure"
    }

    // External systems - Level 1: System Context
    lorawanNetwork = externalSystem "LoRaWAN Network" {
        title "The Things Network (TTN)"
        description "The Things Network infrastructure providing LoRaWAN connectivity and message routing"
        technology "LoRaWAN Network Server"
    }

    multiflexmeterServer = externalSystem "Multiflexmeter Server" {
        title "Multiflexmeter Backend Server"
        description "Backend server for data storage, analysis, visualization and device management"
        technology "Database Server & Web Application"
    }

    // Main system - Level 1: System Context (Our System)
    multiFlexMeter = system "Multiflexmeter Device" {
        title "Multiflexmeter IoT Device"
        description "ATmega1284P-based IoT sensor platform for environmental monitoring with LoRaWAN connectivity"
        technology "Embedded System with LoRaWAN"

        // Level 2: Containers
        // Firmware Container
        deviceFirmware = container "Device Firmware" {
            title "Device Firmware"
            description "Embedded firmware running on ATmega1284P microcontroller"
            technology "C++/Arduino Framework"

            // Level 3: Components
            applicationController = component "Application Controller" {
                title "Application Controller"
                description "Main application logic coordinating device behavior and LoRaWAN communication"
                technology "main.cpp (400 lines)"

                // Level 4: Code units
                setupFunction = codeUnit "Arduino Setup" {
                    title "setup()"
                    description "Device initialization: Serial, board_setup(), os_init(), LMIC_reset(), conf_load(), LMIC_startJoining()"
                    technology "C++ Function (main.cpp:63-97)"
                }

                loopFunction = codeUnit "Arduino Loop" {
                    title "loop()"
                    description "Main loop: executes os_runloop_once() for LMIC OS scheduler"
                    technology "C++ Function (main.cpp:99)"
                }

                eventHandler = codeUnit "LoRaWAN Event Handler" {
                    title "onEvent(ev_t ev)"
                    description "LoRaWAN event processing: EV_JOINING, EV_JOINED (starts job_pingVersion), EV_TXCOMPLETE (processes downlinks), EV_JOIN_TXCOMPLETE, EV_LINK_DEAD"
                    technology "C++ Function (main.cpp:318-386)"
                }

                measurementJobs = codeUnit "LMIC Job Functions" {
                    title "job_performMeasurements(), job_fetchAndSend(), job_pingVersion(), job_reset(), job_error()"
                    description "Scheduled jobs: perform (triggers sensors), fetch&send (reads+transmits), pingVersion (sends FW/HW version on fport 2), reset (mcu_reset after 5s), error (sleep loop)"
                    technology "C++ Functions (main.cpp:101-175)"
                }

                downlinkProcessor = codeUnit "Downlink Command Processor" {
                    title "processDownlink(uint8_t cmd, uint8_t *args, uint8_t len)"
                    description "Processes LoRaWAN downlinks: 0xDE 0xAD (reset), 0x10 (set interval), 0x11 (forward to module via SMBus)"
                    technology "C++ Function (main.cpp:248-302)"
                }

                schedulingLogic = codeUnit "Measurement Scheduling" {
                    title "scheduleNextMeasurement(), getTransmissionTime()"
                    description "Schedules next measurement considering TTN fair use policy (30s airtime/day), duty cycle, and user interval (20-4270s)"
                    technology "C++ Functions (main.cpp:124-246)"
                }

                loraConfiguration = codeUnit "LoRaWAN Pin Mapping" {
                    title "lmic_pinmap lmic_pins"
                    description "Hardware pin mapping: NSS, RST, DIO_0, DIO_1, DIO_2 between ATmega1284P and SX1276 radio"
                    technology "C++ Constant Structure (main.cpp:50-55)"
                }

                loraCallbacks = codeUnit "LMIC Credential Callbacks" {
                    title "os_getArtEui(), os_getDevEui(), os_getDevKey(), os_getMeasurementInterval()"
                    description "LMIC callbacks to retrieve LoRaWAN OTAA credentials and interval from configuration manager"
                    technology "C++ Functions (main.cpp:391-399)"
                }
            }

            sensorManager = component "Sensor Manager" {
                title "Sensor Manager"
                description "High-level sensor interface and data collection coordination via I2C sensor network"
                technology "sensors.cpp (76 lines)"

                sensorAPI = codeUnit "Core Sensor Functions" {
                    title "sensors_init(), sensors_performMeasurement(), sensors_readMeasurement()"
                    description "EXISTING sensor API for I2C sensor board communication at address 0x36 (JSN-SR04T + DS18B20) - commands CMD_PERFORM=0x10, CMD_READ=0x11"
                    technology "C++ Functions (sensors.cpp:45-73)"
                }

                wingStatusFunctions = codeUnit "Wing Status Functions [TODO]" {
                    title "sensors_isWingRotating(), sensors_getWingMovement() [TO BE IMPLEMENTED]"
                    description "Simple wing rotation detection via I2C Hall sensor - returns true/false if wings are moving"
                    technology "C++ Functions extending existing sensor API [TODO]"
                }

                pumpStatusFunctions = codeUnit "Pump Status Functions [TODO]" {
                    title "sensors_isPumpActive(), sensors_getPumpMovement() [TO BE IMPLEMENTED]"
                    description "Simple pump activity detection via I2C Hall sensor - returns true/false if pump is moving"
                    technology "C++ Functions extending existing sensor API [TODO]"
                }
            }

            configurationManager = component "Configuration Manager" {
                title "Configuration Manager"
                description "Device configuration, LoRaWAN credentials, and settings management"
                technology "rom_conf.cpp (111 lines)"

                configStructure = codeUnit "Configuration Functions" {
                    title "conf_load(), conf_save(), conf_getAppEui(), conf_getDevEui(), conf_getAppKey(), conf_setMeasurementInterval(), conf_getMeasurementInterval(), conf_getUseTTNFairUsePolicy()"
                    description "EEPROM ops: conf_load() reads from addr 0, validates 'MFM' magic; conf_save() writes to EEPROM; getters/setters for EUIs (LSB-first), AppKey (MSB-first), interval (little-endian, bounds 20-4270s)"
                    technology "C++ Functions (rom_conf.cpp:42-111)"
                }

                configDataStructure = codeUnit "Configuration Data Structure" {
                    title "rom_conf_t config (static)"
                    description "Static RAM copy of EEPROM config: MAGIC[4]='MFM', HW_VERSION (MSB,LSB), APP_EUI[8], DEV_EUI[8], APP_KEY[16], MEASUREMENT_INTERVAL (uint16_t), USE_TTN_FAIR_USE_POLICY (uint8_t)"
                    technology "C++ Static Structure (rom_conf.cpp:29, rom_conf.h:63-74)"
                }

                versionHandling = codeUnit "Version Management" {
                    title "conf_getFirmwareVersion(), conf_getHardwareVersion(), versionToUint16()"
                    description "Version encoding/decoding: bit[15]=proto, bits[14:10]=major, bits[9:5]=minor, bits[4:0]=patch; FW version from build flags, HW version from EEPROM"
                    technology "C++ Functions (rom_conf.cpp:88-111)"
                }
            }

            communicationStack = component "Communication Stack" {
                title "Communication Stack"
                description "LoRaWAN protocol implementation and radio control"
                technology "arduino-lmic library (external)"

                lmicLibrary = codeUnit "LMIC Library" {
                    title "Arduino LMIC LoRaWAN Stack"
                    description "External library providing LoRaWAN protocol implementation, job scheduling, and radio control"
                    technology "C++ Library (arduino-lmic)"
                }
            }

            hardwareAbstraction = component "Hardware Abstraction Layer" {
                title "Hardware Abstraction Layer"
                description "Low-level hardware drivers and board support"
                technology "smbus.cpp (212 lines), board.cpp variants, wdt.cpp (54 lines)"

                i2cDriver = codeUnit "I2C/SMBus High-Level API" {
                    title "smbus_init(), smbus_blockRead(), smbus_blockWrite(), smbus_sendByte(), smbus_alertAddress()"
                    description "SMBus protocol implementation: init (80kHz TWI clock), blockRead (cmd+length+data), blockWrite (cmd+length+data), sendByte, alertAddress (ARA response)"
                    technology "C++ Functions (smbus.cpp:108-212)"
                }

                twiLowLevel = codeUnit "TWI Low-Level Functions" {
                    title "twi_start(), twi_tx(), twi_rx(), twi_stop(), twi_error()"
                    description "ATmega1284P TWI hardware control: start condition, transmit byte, receive byte (with ACK/NACK), stop condition, error translation from TW_STATUS"
                    technology "C++ Functions (smbus.cpp:41-105)"
                }

                boardSupport = codeUnit "Board Support Variants" {
                    title "board_setup() - MFM v3 and v3_M1284P variants"
                    description "Hardware initialization: v3 (ATmega328P@8MHz, MiniCore, no special init), v3_M1284P (ATmega1284P@8MHz, MightyCore, optional clock prescaler)"
                    technology "C++ Functions (mfm_v3.cpp:41-44, mfm_v3_m1284p.cpp:43-51)"
                }

                boardPinConfig = codeUnit "Board Pin Configurations" {
                    title "mfm_v3.h, mfm_v3_m1284p.h"
                    description "Pin definitions: PERIF_PWR, JSN_TX/RX, ONE_WIRE, BUZZER, NSS, RST, DIO_0..5 (differs between v3 and v3_m1284p)"
                    technology "C++ Header Files (board_config/*.h)"
                }

                watchdogTimer = codeUnit "Watchdog Timer & Reset" {
                    title "mcu_reset(), ISR(WDT_vect), volatile uint8_t do_reset"
                    description "Software reset via watchdog: mcu_reset() sets do_reset=1, enables WDTO_15MS, infinite loop; ISR checks do_reset flag"
                    technology "C++ Functions & ISR (wdt.cpp:26-53)"
                }
            }

            debugSystem = component "Debug & Diagnostic System" {
                title "Debug System"
                description "Conditional debug output system for firmware development and troubleshooting"
                technology "debug.h (91 lines)"

                debugMacros = codeUnit "Debug Macros" {
                    title "_debug(), _debugTime(), _debugf(), _debugFlush()"
                    description "Conditional macros (enabled by DEBUG flag): _debugTime() prints [ms] from os_getTime(), _debug() prints args, _debugf() printf-style, _debugFlush() flushes serial"
                    technology "C++ Preprocessor Macros (debug.h:35-89)"
                }
            }

            errorHandling = component "Error Handling System" {
                title "Error Handling"
                description "Centralized error code definitions and handling"
                technology "errors.h (46 lines)"

                errorTypes = codeUnit "Error Type Enumeration" {
                    title "error_t enum"
                    description "Error codes: ERR_NONE, ERR_SMBUS_SLAVE_NACK, ERR_SMBUS_ARB_LOST, ERR_SMBUS_NO_ALERT, ERR_SMBUS_ERR"
                    technology "C++ Enum (errors.h:26-33)"
                }
            }
        }

        // Hardware Container
        deviceHardware = container "Device Hardware" {
            title "Device Hardware"
            description "Physical hardware components of the Multiflexmeter device"
            technology "Custom PCB - MFM v3 (ATmega328P) or MFM v3 M1284P (ATmega1284P), Sensors, LoRa Module, EEPROM, Power Circuitry"

            sensorHardware = container "Sensor Hardware" {
                title "Polder Mill Monitoring Sensors"
                description "Multi-sensor I2C network for comprehensive polder mill monitoring using shared SDA/SCL bus"
                technology "I2C Bus Network with Multiple Slave Devices"

                existingSensorBoard = container "Existing Sensor Board [I2C 0x36]" {
                    title "Environmental Sensor Board"
                    description "Existing I2C slave device containing ultrasonic and temperature sensors"
                    technology "I2C Slave 0x36, JSN-SR04T + DS18B20, CMD_PERFORM=0x10, CMD_READ=0x11"
                }

                wingRevolutionSensor = container "Wing Revolution Sensor [TODO: I2C 0x37]" {
                    title "Wing Revolution Detection [TO BE IMPLEMENTED]"
                    description "I2C Hall Effect sensor board for precise wing rotation measurement - TO BE ADDED"
                    technology "I2C Slave 0x37, Hall Effect A3144, CMD_READ_RPM=0x20 [TODO]"
                }

                pumpingDetectionSensor = container "Pumping Detection Sensor [TODO: I2C 0x38]" {
                    title "Pumping Mechanism Detection [TO BE IMPLEMENTED]"
                    description "I2C Hall Effect sensor board for rad/vijzel pumping activity detection - TO BE ADDED"
                    technology "I2C Slave 0x38, Hall Effect A3144, CMD_READ_STATUS=0x21 [TODO]"
                }

                i2cBusInfrastructure = container "I2C Bus Infrastructure" {
                    title "Shared I2C Communication Bus"
                    description "Two-wire I2C bus connecting all sensor devices to ATmega1284P"
                    technology "SDA/SCL lines, 100kHz, 7-bit addressing, SMBus protocol support"
                }
            }

            radioHardware = container "Radio Hardware" {
                title "LoRa Radio Module"
                description "Long-range wireless communication hardware"
                technology "SX1276 LoRa Transceiver (RFM95W)"

                sx1276Chip = component "SX1276 LoRa Chip" {
                    title "SX1276 LoRa Transceiver"
                    description "Semtech SX1276 LoRa transceiver chip supporting EU868 frequency plan"
                    technology "SX1276 IC"
                }

                spiInterface = component "SPI Interface" {
                    title "SPI Communication"
                    description "SPI bus for MCU-to-radio communication: MOSI, MISO, SCK, NSS (chip select)"
                    technology "Hardware SPI"
                }

                dioLines = component "DIO Interrupt Lines" {
                    title "DIO GPIO Interrupt Pins"
                    description "Digital I/O pins for radio event signaling: DIO0 (TxDone/RxDone), DIO1 (RxTimeout/FhssChangeChannel), DIO2 (FhssChangeChannel)"
                    technology "GPIO Interrupts"
                }
            }

            storageHardware = container "Storage Hardware" {
                title "Non-volatile Storage"
                description "Configuration and credential storage"
                technology "ATmega1284P Internal EEPROM (4KB)"

                eepromChip = component "EEPROM Storage" {
                    title "ATmega1284P EEPROM"
                    description "4KB internal EEPROM for persistent config storage (41 bytes used at address 0x00)"
                    technology "Internal EEPROM"
                }
            }

            powerHardware = container "Power System" {
                title "Power Management"
                description "Battery power supply and management circuits"
                technology "Battery & Power Electronics"

                peripheralPowerControl = component "Peripheral Power Switch" {
                    title "Peripheral Power Control"
                    description "GPIO-controlled power switch for sensors (PIN_PERIF_PWR): v3=pin2, v3_m1284p=pin20"
                    technology "MOSFET Power Switch"
                }
            }
        }
    }

    // External System Connections to Our System
    multiFlexMeter -> mallemolen "Monitors polder mill operations"
    multiFlexMeter -> lorawanNetwork "Transmits sensor data via LoRaWAN protocol"
    lorawanNetwork -> multiflexmeterServer "Routes processed data to backend platform"

    // Level 2: Container Relationships (Internal to Our System)
    deviceFirmware -> deviceHardware "Controls and interfaces with all hardware components"
    deviceFirmware -> sensorHardware "Controls and reads sensors via I2C"
    deviceFirmware -> radioHardware "Transmits LoRaWAN packets"
    deviceFirmware -> storageHardware "Stores/retrieves configuration and credentials"
    deviceFirmware -> powerHardware "Manages power consumption and sleep modes"

    // Physical sensor connections to data source
    sensorHardware -> mallemolen "Monitors polder mill conditions: wing revolution, pumping activity, temperature"
    existingSensorBoard -> mallemolen "Monitors environmental conditions (temperature, distance) via existing I2C interface"
    wingRevolutionSensor -> mallemolen "Measures wing gear rotation frequency and speed [TODO: TO BE IMPLEMENTED]"
    pumpingDetectionSensor -> mallemolen "Detects rad/vijzel pumping mechanism activity [TODO: TO BE IMPLEMENTED]"
    i2cBusInfrastructure -> mallemolen "Enables reliable sensor communication via shared I2C bus"

    // Container connections to external systems
    radioHardware -> lorawanNetwork "Sends LoRaWAN packets to TTN gateway"
    deviceFirmware -> lorawanNetwork "Manages LoRaWAN protocol stack"

    // Level 3: Component Relationships (Internal to Our System)
    applicationController -> communicationStack "Initiates LoRaWAN transmissions"
    applicationController -> configurationManager "Manages device settings and credentials"
    applicationController -> sensorManager "Schedules measurement cycles"
    applicationController -> debugSystem "Uses debug output during development"
    applicationController -> hardwareAbstraction "Controls watchdog and board initialization"

    sensorManager -> hardwareAbstraction "Uses I2C communication for sensor access"
    configurationManager -> hardwareAbstraction "Accesses EEPROM storage for persistence"
    communicationStack -> hardwareAbstraction "Controls radio hardware for LoRaWAN"
    hardwareAbstraction -> errorHandling "Returns error codes from HAL operations"

    // Component connections to external systems
    communicationStack -> lorawanNetwork "Handles LoRaWAN protocol communication"
    communicationStack -> radioHardware "Controls SX1276 via SPI and DIO pins"
    configurationManager -> storageHardware "Reads/writes EEPROM configuration"

    // Level 4: Code Unit Relationships (Internal to Our System)
    setupFunction -> boardSupport "Calls board_setup() for hardware initialization"
    setupFunction -> configStructure "Calls conf_load() to load EEPROM configuration"
    setupFunction -> lmicLibrary "Initializes LMIC with os_init(), LMIC_reset(), LMIC_startJoining()"
    loopFunction -> lmicLibrary "Executes os_runloop_once() for LMIC scheduler"
    
    eventHandler -> measurementJobs "Schedules jobs: EV_JOINED->job_pingVersion, periodic->job_performMeasurements"
    eventHandler -> downlinkProcessor "Calls processDownlink() on EV_TXCOMPLETE with data"
    measurementJobs -> sensorAPI "job_performMeasurements calls sensors_performMeasurement(), job_fetchAndSend calls sensors_readMeasurement()"
    measurementJobs -> lmicLibrary "Uses LMIC_setTxData2() to transmit sensor data"
    measurementJobs -> versionHandling "job_pingVersion encodes and sends FW/HW version"
    measurementJobs -> watchdogTimer "job_reset calls mcu_reset()"
    
    downlinkProcessor -> configStructure "0x10 command calls conf_setMeasurementInterval() and conf_save()"
    downlinkProcessor -> i2cDriver "0x11 command forwards to smbus_blockWrite()"
    downlinkProcessor -> watchdogTimer "0xDEAD command schedules mcu_reset()"
    
    schedulingLogic -> configStructure "Reads conf_getMeasurementInterval() and conf_getUseTTNFairUsePolicy()"
    schedulingLogic -> lmicLibrary "Calculates airtime with calcAirTime(), checks LMICbandplan_nextTx()"
    
    loraCallbacks -> configStructure "os_getArtEui/DevEui/DevKey call conf_getAppEui/DevEui/AppKey()"
    
    sensorAPI -> i2cDriver "Calls smbus_init(), smbus_sendByte(0x36, CMD_PERFORM), smbus_blockRead(0x36, CMD_READ)"
    
    i2cDriver -> twiLowLevel "High-level SMBus functions use twi_start(), twi_tx(), twi_rx(), twi_stop()"
    twiLowLevel -> errorTypes "Returns error_t codes, twi_error() translates TW_STATUS"
    
    boardSupport -> boardPinConfig "Reads PIN_* definitions from board config headers"
    loraConfiguration -> boardPinConfig "Uses PIN_NSS, PIN_RST, PIN_DIO_0/1/2"
    
    debugMacros -> lmicLibrary "Uses os_getTime() for timestamped debug output"

    // Sensor function relationships - simplified for basic status detection
    sensorAPI -> wingStatusFunctions "Coordinates wing status detection [TODO: TO BE IMPLEMENTED]"
    sensorAPI -> pumpStatusFunctions "Coordinates pump status detection [TODO: TO BE IMPLEMENTED]"
    wingStatusFunctions -> i2cDriver "Uses SMBus for wing sensor communication [TODO: TO BE IMPLEMENTED]"
    pumpStatusFunctions -> i2cDriver "Uses SMBus for pump sensor communication [TODO: TO BE IMPLEMENTED]"
    
    // Hardware component relationships
    sx1276Chip -> spiInterface "SX1276 communicates via SPI bus"
    sx1276Chip -> dioLines "SX1276 signals events via DIO pins"
}

views {
    view index {
        title "System Context View: Multiflexmeter Polder Mill Monitoring"
        description "Level 1: System Context - Shows Multiflexmeter device monitoring Mallemolen polder mill wing revolution and pumping activity"
        include mallemolen, multiFlexMeter, lorawanNetwork, multiflexmeterServer
    }

    view of multiFlexMeter {
        title "Container View: Multiflexmeter Polder Mill Monitoring"
        description "Level 2: Container View - Shows major containers within Multiflexmeter monitoring wing revolution frequency and pumping status"
        include mallemolen, multiFlexMeter, deviceFirmware, deviceHardware, sensorHardware, radioHardware, storageHardware, powerHardware
        include lorawanNetwork, multiflexmeterServer
    }

    view of deviceFirmware {
        title "Component View: Multiflexmeter"
        description "Level 3: Component View - Shows software components within device firmware and their hardware interfaces"
        include multiFlexMeter, deviceFirmware, deviceHardware
        include applicationController, sensorManager, configurationManager, communicationStack, hardwareAbstraction
        include sensorHardware, radioHardware, storageHardware, powerHardware
        include lorawanNetwork, multiflexmeterServer, mallemolen
    }

    view of sensorHardware {
        title "I2C Sensor Network: Polder Mill Monitoring"
        description "Detailed view of I2C sensor network showing existing environmental sensors and planned Hall sensor expansion"
        include mallemolen, sensorHardware, i2cBusInfrastructure
        include existingSensorBoard, wingRevolutionSensor, pumpingDetectionSensor
    }

    view of deviceFirmware {
        title "Firmware Components (Expanded)"
        description "Level 3: Detailed firmware components including debug and error handling systems"
        include deviceFirmware
        include applicationController, sensorManager, configurationManager, communicationStack, hardwareAbstraction, debugSystem, errorHandling
    }

    view of applicationController {
        title "Application Controller Details"
        description "Level 4: Code units within the Application Controller component"
        include applicationController
        include setupFunction, loopFunction, eventHandler, measurementJobs, downlinkProcessor, schedulingLogic, loraConfiguration, loraCallbacks
    }

    view of hardwareAbstraction {
        title "Hardware Abstraction Layer Details"
        description "Level 4: Low-level drivers and board support code units"
        include hardwareAbstraction
        include i2cDriver, twiLowLevel, boardSupport, boardPinConfig, watchdogTimer
    }

    view of configurationManager {
        title "Configuration Manager Details"
        description "Level 4: Configuration functions and data structures"
        include configurationManager
        include configStructure, configDataStructure, versionHandling
    }

    view of radioHardware {
        title "LoRa Radio Hardware Details"
        description "Radio hardware components: SX1276 chip, SPI interface, and DIO interrupt lines"
        include radioHardware, sx1276Chip, spiInterface, dioLines
    }

    view code {
        title "Complete Code Diagram"
        description "Level 4: Comprehensive code view showing all functions and structures from source files"
        include setupFunction, loopFunction, eventHandler, measurementJobs, downlinkProcessor, schedulingLogic, loraConfiguration, loraCallbacks
        include sensorAPI, wingStatusFunctions, pumpStatusFunctions
        include configStructure, configDataStructure, versionHandling
        include i2cDriver, twiLowLevel, boardSupport, boardPinConfig, watchdogTimer
        include debugMacros, errorTypes
        include lmicLibrary
        include applicationController, sensorManager, configurationManager, communicationStack, hardwareAbstraction, debugSystem, errorHandling
    }

    view detailed_architecture {
        title "Detailed System Architecture"
        description "Complete architecture view with firmware components and hardware modules"
        include multiFlexMeter, deviceFirmware, deviceHardware
        include applicationController, sensorManager, configurationManager, communicationStack, hardwareAbstraction, debugSystem, errorHandling
        include sensorHardware, radioHardware, storageHardware, powerHardware
        include sx1276Chip, spiInterface, dioLines, eepromChip, peripheralPowerControl
        include lorawanNetwork
    }
}